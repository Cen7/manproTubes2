<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <link rel="icon" href="/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <title>Home Page</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter%3A400%2C500%2C700"/>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro%3A400%2C500%2C700"/>
  <link rel="stylesheet" href="/css/home-page.css"/>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
</head>

<body>
  <%- include('navbar') %>
  <div class="home-page">
    <div class="content-left">
      <p class="dashboard">Dashboard</p>
      <div class="upload-view">
        <div class="upload">
          <p class="upload-view-text">Upload new data</p>
          <button class="upload-view-button" onclick="dataSets()">Upload</button>
        </div>
        <div class="line">
        </div>
        <div class="view">
          <p class="upload-view-text">View data sets</p>
          <button class="upload-view-button" onclick="dataSets()">View</button>
        </div>
      </div>

      <div class="section" id="data-summary">
        <div class="head-section">
          <p class="title-section" id="summaryTitle"></p>
          <button onclick="dataSummary()" class="view-more">View more</button>
        </div>
        <div id="tableData" tableRow = "<%= tableRow%>" tableCol = "<%= tableCol%>" tableAgr = "<%= tableAgr%>">
          <table id="resultTable" class="content-section">
          </table>
        </div>
        
        
      </div>
    </div>

    <div class="content-right">
      <div class="section chart" id="bar-chart">
        <div class="head-section">
          <p class="title-section" id="barTitle"></p>
          <button onclick="barChart()" class="view-more">View more</button>
        </div>
        <div id="barData" barRow = "<%= barRow%>" barCol = "<%= barCol%>" barAgr = "<%= barAgr%>"></div>
        <canvas id="bar"></canvas>
      </div>

      <div class="section chart" id="scatter-plot">
        <div class="head-section">
          <p class="title-section" id="scatterTitle"></p>
          <button onclick="scatterPlot()" class="view-more">View more</button>
        </div>
        <div id="scatterData" scatterRow = "<%= scatterRow%>" scatterCol = "<%= scatterCol%>" scatterAgr = "<%= scatterAgr%>"></div>
        <canvas id="scatter"></canvas>
      </div>
    </div>
  </div>
</body>

<script>
  const summaryTitle = document.getElementById('summaryTitle');
  const dataContainer = document.getElementById('tableData');
  const tableRow = dataContainer.getAttribute('tableRow');
  const tableCol = dataContainer.getAttribute('tableCol');
  const tableAgr = dataContainer.getAttribute('tableAgr');

  console.log(tableRow)

  if (tableRow === '') {
    summaryTitle.textContent = "Data Summary";
    dataContainer.textContent = "Attributes not found!";
  } else {
    summaryTitle.textContent = `${tableAgr}(${tableCol}) dari ${tableRow}`;

    function generateTable() {
      const resultTable = document.getElementById("resultTable");
  
      // Make an AJAX request to the server to get the aggregated data based on the selected parameters
      fetch(`/getData?row=${tableRow}&col=${tableCol}&agr=${tableAgr}`)
        .then(response => response.json())
        .then(data => {
          // Generate the table based on the received data
          generateTableFromData(resultTable, data, tableRow, tableCol, tableAgr);
        })
        .catch(error => console.error("Error fetching data:", error));
    }
  
    function generateTableFromData(table, data, selectedRow, selectedCol, selectedAgr) {
      // Clear existing table content
      table.innerHTML = "";
  
      // Create table header
      const headerRow = table.insertRow();
      headerRow.insertCell().innerText = selectedRow;
      headerRow.insertCell().innerText = `${selectedAgr}(${selectedCol})`;
  
      // Populate table rows with data
      data.forEach(item => {
        const row = table.insertRow();
        row.insertCell().innerText = item[selectedRow];
        row.insertCell().innerText = item.aggregatedValue;
      });
    }

    generateTable();
  }


  const barTitle = document.getElementById('barTitle');
  const barData = document.getElementById('barData');
  const barRow = barData.getAttribute('barRow');
  const barCol = barData.getAttribute('barCol');
  const barAgr = barData.getAttribute('barAgr');

  if (barRow === '') {
    barTitle.textContent = "Bar Chart";
    barData.textContent = "Attributes not found!";
  } else {
    barTitle.textContent = `${barAgr}(${barCol}) dari ${barRow}`;

    function generateChart() {
      fetch(`/getDataForChart?row=${barRow}&col=${barCol}&agr=${barAgr}`)
        .then(response => response.json())
        .then(data => {
          // Extract labels and data from the response
          const labels = data.map(item => item.label);
          const chartData = data.map(item => item.value);
          console.log(chartData)
          // Create a bar chart
          createBarChart(labels, chartData);
        })
        .catch(error => console.error("Error fetching data:", error));
    }
  
    function createBarChart(labels, data) {
      var ctx = document.getElementById('bar').getContext('2d');
      var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          }]
        },
        options: {
          legend: {display: false},
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    generateChart();
  }


  const scatterTitle = document.getElementById('scatterTitle');
  const scatterData = document.getElementById('scatterData');
  const scatterRow = scatterData.getAttribute('scatterRow');
  const scatterCol = scatterData.getAttribute('scatterCol');
  const scatterAgr = scatterData.getAttribute('scatterAgr');

  if (scatterRow === '') {
    scatterTitle.textContent = "Scatter Plot";
    scatterData.textContent = "Attributes not found!";
  } else {
    scatterTitle.textContent = `Persebaran antara ${scatterRow} dan ${scatterCol}`;

    function generateScatterPlot() {
      fetch(`/getDataForScatterPlot?row=${scatterRow}&col=${scatterCol}&agr=${scatterAgr}`)
        .then(response => response.json())
        .then(data => {
          // Extract labels and data from the response
          const labels = data.map(item => item.label);
          const chartData = data.map(item => ({ x: item.xValue, y: item.yValue }));
          // Create a scatter plot
          createScatterPlot(labels, chartData);
        })
        .catch(error => console.error("Error fetching data:", error));
    }
  
    function createScatterPlot(labels, chartData) {
      const ctx = document.getElementById("scatter").getContext("2d");
      const scatterChart = new Chart(ctx, {
        type: 'scatter',
        data: {
          datasets: [{
            label: 'Scatter Plot',
            pointRadius: 4,
            data: chartData,
            pointBackgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color
          }]
        },
        options: {
          legend: {display: false},
          scales: {
            x: {
              type: 'linear',
              position: 'bottom'
            },
            y: {
              min: 0 // You can adjust the minimum value for the y-axis
            }
          }
        }
      });
    }

    generateScatterPlot();
  }

  function dataSets(){
    window.location.href='datasets'
  }

  function dataSummary(){
    window.location.href='data-summary'
  }

  function barChart(){
    window.location.href='bar-chart'
  }

  function scatterPlot(){
    window.location.href='scatter-plot'
  }
</script>